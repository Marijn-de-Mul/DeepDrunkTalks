services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "81:80"
      - "82:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - webroot:/var/www/html
    depends_on:
      - frontend
    networks:
      - production

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - webroot:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email test@test.nl --agree-tos --no-eff-email --force-renewal -d ddt.marijndemul.nl

  frontend:
    image: marijndemul16/ddt.frontend:latest
    container_name: frontend
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
    restart: always
    networks:
      - production

  backend:
    image: marijndemul16/ddt.backend:latest
    container_name: backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_TO_CONSOLE=${LOG_TO_CONSOLE}
      - LOG_TO_FILE=${LOG_TO_FILE}
    ports:
      - "8079:8079"
      - "8080:8080"
    restart: always
    depends_on:
      - postgres
    networks:
      - production

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - production

volumes:
  postgres_data:
  certbot-etc:
  certbot-var:
  webroot:

networks:
  production:
    driver: bridge