version: '3'

services:
  nginx:
    image: nginx:latest
    container_name: ddt_nginx
    ports:
      - "81:80"  
      - "82:443"   
    depends_on:
      - frontend
    networks:
      - production
    volumes:
      - ./nginx-configs:/etc/nginx
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    environment:
      - NGINX_HOST=ddt.marijndemul.nl  
      - NGINX_EMAIL=test@test.nl  
    command: >
      sh -c "echo '
      server {
        listen 80;
        server_name ${NGINX_HOST};

        location / {
          proxy_pass http://ddt_frontend:3000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /.well-known/acme-challenge/ {
          root /var/www/certbot;
        }
      }

      server {
        listen 443 ssl;
        server_name ${NGINX_HOST};

        ssl_certificate /etc/letsencrypt/live/${NGINX_HOST}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${NGINX_HOST}/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        location / {
          proxy_pass http://ddt_frontend:3000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
      }' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
  
  certbot:
    image: certbot/certbot
    container_name: certbot
    depends_on:
      - nginx
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  frontend:
    image: marijndemul16/ddt.frontend:latest
    container_name: ddt_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: always
    networks:
      - production

  backend:
    image: marijndemul16/ddt.backend:latest
    container_name: ddt_backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DB_HOST=${DB_HOST}           
      - DB_PORT=${DB_PORT}           
      - DB_USER=${DB_USER}           
      - DB_PASS=${DB_PASS}           
      - DB_NAME=${DB_NAME}           
      - JWT_SECRET=${JWT_SECRET}     
      - LOG_TO_CONSOLE=${LOG_TO_CONSOLE} 
      - LOG_TO_FILE=${LOG_TO_FILE}      
    ports:
      - "8079:8079"
      - "8080:8080"
    restart: always
    depends_on:
      - postgres
    networks:
      - production

  postgres:
    image: postgres:13
    container_name: ddt_postgres
    environment:
      - POSTGRES_DB=${DB_NAME}  
      - POSTGRES_USER=${DB_USER} 
      - POSTGRES_PASSWORD=${DB_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - production

networks:
  production:
    driver: bridge

volumes:
  postgres_data:
