version: '3'

services:
  nginx:
    image: nginx:latest
    container_name: ddt_nginx
    ports:
      - "81:80"
      - "82:443"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
      - "/etc/letsencrypt/live/ddt.marijndemul.nl/fullchain.pem:/etc/ssl/certs/fullchain.pem:ro"
      - "/etc/letsencrypt/live/ddt.marijndemul.nl/privkey.pem:/etc/ssl/private/privkey.pem:ro"
    depends_on:
      - frontend
    networks:
      - production

  frontend:
    image: marijndemul16/ddt.frontend:latest
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: always
    networks:
      - production

  backend:
    image: marijndemul16/ddt.backend:latest
    container_name: backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_TO_CONSOLE=${LOG_TO_CONSOLE}
      - LOG_TO_FILE=${LOG_TO_FILE}
    ports:
      - "8079:8079"
      - "8080:8080"
    restart: always
    depends_on:
      - postgres
    networks:
      - production

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - production

networks:
  production:
    driver: bridge

volumes:
  postgres_data:
